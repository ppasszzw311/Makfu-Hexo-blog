{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/error_icon.png","path":"css/images/error_icon.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/icp.png","path":"css/images/icp.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/ga.png","path":"css/images/ga.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"source/images/RxSrWJm.jpg","path":"images/RxSrWJm.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1704469024681},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1704469024682},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1704334853391},{"_id":"source/series/index.md","hash":"364b07ea1e0b28e792fc7bbddac0069c771dbefa","modified":1704469024682},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1704469255360},{"_id":"themes/vexo/.gitignore","hash":"99e5bb4cc2a0b34f697ecc7c146f9d10d0a986e8","modified":1704339433348},{"_id":"themes/vexo/_config.yml","hash":"d39f584af0b7dc57eb5c5d752b2106ea72474bfb","modified":1704469248291},{"_id":"themes/vexo/README.md","hash":"76d30348cde696a75dd4f50b0747c5e8e3779046","modified":1704469248291},{"_id":"themes/vexo/.travis.yml","hash":"b3ac9cda9d6000736519c78272ea03733f70bbfc","modified":1704339433349},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1704469248299},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1704469248291},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1704469248297},{"_id":"themes/vexo/package.json","hash":"44e46ed458ca4351db2a773bb4c09ac814b7b1e0","modified":1704469248300},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1704469248298},{"_id":"themes/vexo/layout/page.ejs","hash":"c5a6f2f18b0cf664c7a34945ff46f83c81d6924c","modified":1704469248298},{"_id":"themes/vexo/layout/project.ejs","hash":"a023b833a64006989c718c8d6125978a87fa2c3e","modified":1704469248298},{"_id":"themes/vexo/layout/series.ejs","hash":"32010111ef27d2eefec44aba5a865064659d613a","modified":1704469248299},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1704469248297},{"_id":"themes/vexo/layout/archive.ejs","hash":"f2480a73048bcb8673d78283090634d0857b80fb","modified":1704469248297},{"_id":"themes/vexo/layout/tags.ejs","hash":"256413f3c6098eba42fce8f24319913e4b2512dc","modified":1704469248299},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1704469248293},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1704469248293},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"8a3a4d5895330176e18bd6500b86b494c9246e7c","modified":1704469248294},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"6143509886587898fc3f81c7454fb83f32887201","modified":1704469248294},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1704469248294},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1704469248295},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"cbd8c09e3349ed4facec92d5068c4ee777d52418","modified":1704469248294},{"_id":"themes/vexo/layout/_third-party/google_analytics.ejs","hash":"d09107a4ee5753a2fbbdb16ddf79d23ff0618c19","modified":1704469248296},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1704469248296},{"_id":"themes/vexo/layout/_third-party/localsearch.ejs","hash":"fdf9e9f25b673c3f66694581cf5ebb578e5393b9","modified":1704469248296},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1704469248295},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1704469248296},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1704469248293},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1704469248292},{"_id":"themes/vexo/source/css/style.styl","hash":"9dcd5509187654c29d0d908016a052fd164d257c","modified":1704469248309},{"_id":"themes/vexo/_source/series/index.md","hash":"364b07ea1e0b28e792fc7bbddac0069c771dbefa","modified":1704469248292},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1704469248292},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1704469248300},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1704469248312},{"_id":"themes/vexo/source/js/script.js","hash":"1e0a395deba4f5ae66a5758590e094d26d777421","modified":1704469248312},{"_id":"themes/vexo/source/js/local-search.js","hash":"2d4c35e67f6ae2234a220c2898534d5bcb5245a2","modified":1704469248312},{"_id":"themes/vexo/layout/_partial/search/localsearch_button.ejs","hash":"3cb21e8d581ee998796f3f4bf9cd00abb9a67072","modified":1704469248295},{"_id":"themes/vexo/layout/_partial/search/localsearch_view.ejs","hash":"79e5e1a159d18b9e05961a47a4607b14be447e50","modified":1704469248295},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"e3fd04eb0ae723def29592a0063e0706046cb6f2","modified":1704469248301},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1704469248301},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"1fc9572052194d94f86224a860e6b52435492e57","modified":1704469248301},{"_id":"themes/vexo/source/css/_partial/categories.styl","hash":"d78cf86064428693e2173b4f23535cf311d18091","modified":1704469248302},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"6154d83977e8e725c52786b14a4d9b3bc62b1061","modified":1704469248302},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"d90207a2b25e7a7a12b94cfcd5dde070422783e7","modified":1704469248302},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1704469248303},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"2a1a99a0a8a9ffab1e64b7d7c9241ce8d5c84c39","modified":1704469248302},{"_id":"themes/vexo/source/css/_partial/search.styl","hash":"4fa3d5c7efd1de510719157bd7a6ab3c9f24e9fd","modified":1704469248304},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1704469248303},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1704469248303},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1704469248304},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1704339433422},{"_id":"themes/vexo/source/css/images/ga.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1704339433426},{"_id":"themes/vexo/source/css/images/error_icon.png","hash":"efec6e759508dd02e6fa8c4facd9a25a61aae055","modified":1704339433424},{"_id":"themes/vexo/source/css/images/icp.png","hash":"28a83ac96146b1e0513a6eb68a24a591cd59821c","modified":1704339433427},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1704469248307},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1704339433425},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1704339433430},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1704339433429},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1704339433423},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1704339433432},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1704469248309},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1704469248311},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1704339433440},{"_id":"public/series/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1704339658722},{"_id":"public/tags/index.html","hash":"4bb6d8d2157913687073ba32004651651c0c7e43","modified":1704501358380},{"_id":"public/about/index.html","hash":"4b9d487206fa93c9836f2dc6240f7bed63643bb7","modified":1704470375405},{"_id":"public/project/index.html","hash":"8873272e0a7fd0f55a6671694c02ce8f14d225a9","modified":1704470375405},{"_id":"public/2024/01/04/hello-world/index.html","hash":"02efb391a9ce1c6d70ccf106757677249af60ab6","modified":1704339923476},{"_id":"public/archives/index.html","hash":"64b5fde181e99cda70ece1194deba3466b3bf76a","modified":1704501358380},{"_id":"public/archives/2024/index.html","hash":"17913201fa14cbbbddedc1caffed591f014e4701","modified":1704501358380},{"_id":"public/archives/2024/01/index.html","hash":"f973396d7af76ba0a1f4578154741267eca0072d","modified":1704501358380},{"_id":"public/index.html","hash":"4dc6199fcfe082c4f88791bb3b990dbcbd4da767","modified":1704501358380},{"_id":"public/css/images/ga.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1704339658722},{"_id":"public/css/images/error_icon.png","hash":"efec6e759508dd02e6fa8c4facd9a25a61aae055","modified":1704339658722},{"_id":"public/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1704470375405},{"_id":"public/css/images/icp.png","hash":"28a83ac96146b1e0513a6eb68a24a591cd59821c","modified":1704339658722},{"_id":"public/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1704339658722},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1704339658722},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1704339658722},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1704339658722},{"_id":"public/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1704470375405},{"_id":"public/css/style.css","hash":"5adfacca2813469f858b0916dbfdeaf7d0f083e9","modified":1704339658722},{"_id":"public/js/script.js","hash":"1e0a395deba4f5ae66a5758590e094d26d777421","modified":1704339658722},{"_id":"public/js/local-search.js","hash":"2d4c35e67f6ae2234a220c2898534d5bcb5245a2","modified":1704339658722},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1704339658722},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1704339658722},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1704339658722},{"_id":"public/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1704339658722},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1704339658722},{"_id":"source/_posts/AOD-網路商城網站建置.md","hash":"e5b563cdcd71174907244fdcbc08de1aa5c776f6","modified":1704470931894},{"_id":"source/_posts/在React中引入Css的方式.md","hash":"2b4487040f5d0965eb1381a53381e16db2300a0e","modified":1704470917036},{"_id":"public/atom.xml","hash":"dafbc87b7b2705efe4927e9bfa955bbc467a616f","modified":1704501358380},{"_id":"public/2024/01/04/AOD-網路商城網站建置/index.html","hash":"6a6ff92b3ec931d4797f0beac30a31f8c2bba665","modified":1704501358380},{"_id":"public/2024/01/04/在React中引入Css的方式/index.html","hash":"e883537401a24c20da44fd1a915f597c2eac8425","modified":1704501358380},{"_id":"public/tags/React/index.html","hash":"5dd6c06723946dadceb9622f062a4d0c4692e8d0","modified":1704501358380},{"_id":"source/_posts/三層式架構.md","hash":"a9980c766e112eb2f08805784b347e636fb22a31","modified":1704471963596},{"_id":"source/_posts/React-面試題.md","hash":"c5ef9f8234be86a091f999ef8ffd7a2bf69ea3bc","modified":1704470904771},{"_id":"public/2024/01/05/React-面試題/index.html","hash":"b751408745691a683068509b80e458e7bf3a9e47","modified":1704501358380},{"_id":"public/2024/01/05/三層式架構/index.html","hash":"05d01fb00c01ed3d75a6677474aa12db3dd8e50e","modified":1704501358380},{"_id":"public/tags/頁面/index.html","hash":"0b308383c2ee8be7dba771444e67af099c068da0","modified":1704501358380},{"_id":"public/tags/物件導向設計/index.html","hash":"609a26797f99e267282e2cb75e6d45a4fcf530ac","modified":1704501358380},{"_id":"source/_posts/NET要學習的概念名詞.md","hash":"6a8a7df0d60b7b79642e0ba33db4c436e3f09986","modified":1704501329872},{"_id":"source/images/RxSrWJm.jpg","hash":"88945a03059f17e7f39937c7b8164b2435510cb7","modified":1704470462196},{"_id":"public/2024/01/06/NET要學習的概念名詞/index.html","hash":"81d6f9e91d47c1d9a7c0195b96b661d42b6e6d42","modified":1704501358380},{"_id":"public/tags/C/index.html","hash":"b8b4386612c50e5a236bad225e6a564657c42e69","modified":1704501358380},{"_id":"public/tags/前端面試/index.html","hash":"a8eefa21b81d225a870bf66bab309335b6c45c27","modified":1704501358380},{"_id":"public/tags/Css/index.html","hash":"d11a78d192f1193ef1111bb14f2a7419456a5f41","modified":1704501358380},{"_id":"public/tags/系統架構/index.html","hash":"d87a2362758170b42928cd0aed154344e43ec742","modified":1704501358380},{"_id":"public/tags/NET/index.html","hash":"66f7890b449cdd69d342d13d8137b7641c08f125","modified":1704501358380},{"_id":"public/images/RxSrWJm.jpg","hash":"88945a03059f17e7f39937c7b8164b2435510cb7","modified":1704501358380}],"Category":[],"Data":[],"Page":[{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2024-01-05T15:37:04.682Z","updated":"2024-01-05T15:37:04.682Z","path":"tags/index.html","_id":"clqynta0b0000i8rp1j1vd0wr","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2024-01-05T15:40:55.361Z","updated":"2024-01-05T15:40:55.360Z","path":"about/index.html","_id":"clqynta0e0001i8rpatt24jc4","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2024-01-05T15:37:04.681Z","updated":"2024-01-05T15:37:04.681Z","path":"project/index.html","_id":"clqynta0f0002i8rp36yq2ida","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Series","layout":"series","_content":"","source":"series/index.md","raw":"---\ntitle: Series\nlayout: series\n---\n","date":"2024-01-05T15:37:04.682Z","updated":"2024-01-05T15:37:04.682Z","path":"series/index.html","_id":"clqynta0l0004i8rpg8tq78kh","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"在React中引入Css的方式","date":"2024-01-04T04:19:53.000Z","_content":"\n> 紀錄自己在開發react時遇到的問題\n在在react中的樣式(style)許多種呈現的方式，目前有用到的方式\n## 1. import css\n在react中引入css檔案，並且透過class的方式，讓節點可以吃到樣式。\n\n```css\n.button-search {\n    padding: 0.6rem 1.3rem;\n    background-color: bg-primary\n}\n```\n實際的使用\n```jsx\nimport \"./button.css\"\n​\nconst SearchBtn = (props) => {\n    return (\n        <button className=\"button-search\" ...props>{props.children}</button> \n    )\n}\n```\n\n## 2. 使用CSS Modules引入\n跟上面的方式主要的不同，是透過module的方式來引入css，可解決\n1. 確保單個組件（元件）的所有樣式集中在同一個地方\n2. 確保元件樣式只應用於該組件，他會在原有的class名稱加入雜湊值，成為獨一無二的樣式。\n3. 解決 CSS 全局作用域的問題\n\n實際的做法: 先新增一個 **<styleName>.module.css**的檔案，在裡面加入如\n```css\n.buttonSearch {\n    padding: 0.6rem 1.3rem;\n    background-color: bg-primary;\n}\n```\n\n命名可以使用這種駝峰式的樣式寫法，在引用的時候會比較方便。實際的引入－(如果是使用類似\"button-search\"的寫法，在使用的時候就需要以 **classes[\"button-search\"]**的方式來寫)\n```jsx\nimport classes from \"./button.module.css\"\n​\nconst SearchBtn = (props) => {\n    return (\n        <button className={classes.buttonSearch} ...props>{props.children}</button> \n    )\n}\n```\n\n> 參考來源:https://molly1024.medium.com/css-modules-%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%94%B9%E7%94%A8-css-modules-what-is-css-modules-why-should-you-use-it-aeb7d2955c58\n或者是結合其他類型的使用，如bootstrap，可另外建立一個變數中，將要引入的樣式class(如bootstrap)，將這個樣式應用在要套用的元件也有相同的效果。\n\n```jsx\nimport classes from \"./button.module.css\"\nimport \"bootstrap/dist/bootstrap.css\";\n​\nconst SearchBtn = (props) => {\n    const btnClass = `btn ${classes.buttonSearch}`\n    return (\n        <button className={btnClass} ...props>{props.children}</button> \n    )\n}\n```\n\n## 3. 使用styled components\n在介紹react的元件的時候有提到，有一種元件是沒有狀態的，只有提供樣式，這概念很接近styled component則是其進一步的擴展\n安裝，請確定有安裝以下套件\n```cmd\nnpm install styled-components\n```\n\n> 官方網站說明:https://styled-components.com/docs/basics\n前端框架（一）–Styled Component https://hackmd.io/@gBsS-IZnRwict4gxZ0zLhg/SJ9Dfdfcv\n使用方式是創建一個裝載樣式的元件，以styled後面加上要寫入的html tag如\n```jsx\nimport styled from \"styled-components\";\n​\n// 建立一個按鈕的樣式元件\nconst Btn = styled.button`\n   padding: 0.6rem 1.3rem;\n   border: 1px solid black;\n   border-radius: 3px;\n`;\n​\n// 可以引用原本的元件，透過props的屬性，做不同樣式的判斷\nconst SearchBtn = styled(Btn)`\n   color: pink;\n   background: ${props => porps.primary ? \"palevioletred\" : \"white\"}\n`\n​\nconst Content = styled.div`\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   padding: 3rem;\n   width: 100vw;\n   height: 300px;\n`\n​\nconst Main = () => {\n    return (\n        <>\n        <Btn>基礎的按鈕</Btn>\n        <SearchBtn primary />\n        <Content>\n            <h1>Hello world</h1>\n        </Content>\n        </>\n    )\n}​​\n```\n","source":"_posts/在React中引入Css的方式.md","raw":"---\ntitle: 在React中引入Css的方式\ndate: 2024-01-04 12:19:53\ntags: [React, Css]\n---\n\n> 紀錄自己在開發react時遇到的問題\n在在react中的樣式(style)許多種呈現的方式，目前有用到的方式\n## 1. import css\n在react中引入css檔案，並且透過class的方式，讓節點可以吃到樣式。\n\n```css\n.button-search {\n    padding: 0.6rem 1.3rem;\n    background-color: bg-primary\n}\n```\n實際的使用\n```jsx\nimport \"./button.css\"\n​\nconst SearchBtn = (props) => {\n    return (\n        <button className=\"button-search\" ...props>{props.children}</button> \n    )\n}\n```\n\n## 2. 使用CSS Modules引入\n跟上面的方式主要的不同，是透過module的方式來引入css，可解決\n1. 確保單個組件（元件）的所有樣式集中在同一個地方\n2. 確保元件樣式只應用於該組件，他會在原有的class名稱加入雜湊值，成為獨一無二的樣式。\n3. 解決 CSS 全局作用域的問題\n\n實際的做法: 先新增一個 **<styleName>.module.css**的檔案，在裡面加入如\n```css\n.buttonSearch {\n    padding: 0.6rem 1.3rem;\n    background-color: bg-primary;\n}\n```\n\n命名可以使用這種駝峰式的樣式寫法，在引用的時候會比較方便。實際的引入－(如果是使用類似\"button-search\"的寫法，在使用的時候就需要以 **classes[\"button-search\"]**的方式來寫)\n```jsx\nimport classes from \"./button.module.css\"\n​\nconst SearchBtn = (props) => {\n    return (\n        <button className={classes.buttonSearch} ...props>{props.children}</button> \n    )\n}\n```\n\n> 參考來源:https://molly1024.medium.com/css-modules-%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%94%B9%E7%94%A8-css-modules-what-is-css-modules-why-should-you-use-it-aeb7d2955c58\n或者是結合其他類型的使用，如bootstrap，可另外建立一個變數中，將要引入的樣式class(如bootstrap)，將這個樣式應用在要套用的元件也有相同的效果。\n\n```jsx\nimport classes from \"./button.module.css\"\nimport \"bootstrap/dist/bootstrap.css\";\n​\nconst SearchBtn = (props) => {\n    const btnClass = `btn ${classes.buttonSearch}`\n    return (\n        <button className={btnClass} ...props>{props.children}</button> \n    )\n}\n```\n\n## 3. 使用styled components\n在介紹react的元件的時候有提到，有一種元件是沒有狀態的，只有提供樣式，這概念很接近styled component則是其進一步的擴展\n安裝，請確定有安裝以下套件\n```cmd\nnpm install styled-components\n```\n\n> 官方網站說明:https://styled-components.com/docs/basics\n前端框架（一）–Styled Component https://hackmd.io/@gBsS-IZnRwict4gxZ0zLhg/SJ9Dfdfcv\n使用方式是創建一個裝載樣式的元件，以styled後面加上要寫入的html tag如\n```jsx\nimport styled from \"styled-components\";\n​\n// 建立一個按鈕的樣式元件\nconst Btn = styled.button`\n   padding: 0.6rem 1.3rem;\n   border: 1px solid black;\n   border-radius: 3px;\n`;\n​\n// 可以引用原本的元件，透過props的屬性，做不同樣式的判斷\nconst SearchBtn = styled(Btn)`\n   color: pink;\n   background: ${props => porps.primary ? \"palevioletred\" : \"white\"}\n`\n​\nconst Content = styled.div`\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   padding: 3rem;\n   width: 100vw;\n   height: 300px;\n`\n​\nconst Main = () => {\n    return (\n        <>\n        <Btn>基礎的按鈕</Btn>\n        <SearchBtn primary />\n        <Content>\n            <h1>Hello world</h1>\n        </Content>\n        </>\n    )\n}​​\n```\n","slug":"在React中引入Css的方式","published":1,"updated":"2024-01-05T16:08:37.036Z","_id":"clqyp7usp0000uwrpgats7rqe","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>紀錄自己在開發react時遇到的問題<br>在在react中的樣式(style)許多種呈現的方式，目前有用到的方式</p>\n</blockquote>\n<h2 id=\"1-import-css\"><a href=\"#1-import-css\" class=\"headerlink\" title=\"1. import css\"></a>1. import css</h2><p>在react中引入css檔案，並且透過class的方式，讓節點可以吃到樣式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button-search</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.6rem</span> <span class=\"number\">1.3rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: bg-primary</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>實際的使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./button.css&quot;</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBtn</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;button-search&quot;</span> <span class=\"attr\">...props</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-使用CSS-Modules引入\"><a href=\"#2-使用CSS-Modules引入\" class=\"headerlink\" title=\"2. 使用CSS Modules引入\"></a>2. 使用CSS Modules引入</h2><p>跟上面的方式主要的不同，是透過module的方式來引入css，可解決</p>\n<ol>\n<li>確保單個組件（元件）的所有樣式集中在同一個地方</li>\n<li>確保元件樣式只應用於該組件，他會在原有的class名稱加入雜湊值，成為獨一無二的樣式。</li>\n<li>解決 CSS 全局作用域的問題</li>\n</ol>\n<p>實際的做法: 先新增一個 <strong><styleName>.module.css</strong>的檔案，在裡面加入如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.buttonSearch</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.6rem</span> <span class=\"number\">1.3rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: bg-primary;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名可以使用這種駝峰式的樣式寫法，在引用的時候會比較方便。實際的引入－(如果是使用類似”button-search”的寫法，在使用的時候就需要以 **classes[“button-search”]**的方式來寫)</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> classes <span class=\"keyword\">from</span> <span class=\"string\">&quot;./button.module.css&quot;</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBtn</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes.buttonSearch&#125;</span> <span class=\"attr\">...props</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>參考來源:<a href=\"https://molly1024.medium.com/css-modules-%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%94%B9%E7%94%A8-css-modules-what-is-css-modules-why-should-you-use-it-aeb7d2955c58\">https://molly1024.medium.com/css-modules-%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%94%B9%E7%94%A8-css-modules-what-is-css-modules-why-should-you-use-it-aeb7d2955c58</a><br>或者是結合其他類型的使用，如bootstrap，可另外建立一個變數中，將要引入的樣式class(如bootstrap)，將這個樣式應用在要套用的元件也有相同的效果。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> classes <span class=\"keyword\">from</span> <span class=\"string\">&quot;./button.module.css&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;bootstrap/dist/bootstrap.css&quot;</span>;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBtn</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> btnClass = <span class=\"string\">`btn <span class=\"subst\">$&#123;classes.buttonSearch&#125;</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;btnClass&#125;</span> <span class=\"attr\">...props</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用styled-components\"><a href=\"#3-使用styled-components\" class=\"headerlink\" title=\"3. 使用styled components\"></a>3. 使用styled components</h2><p>在介紹react的元件的時候有提到，有一種元件是沒有狀態的，只有提供樣式，這概念很接近styled component則是其進一步的擴展<br>安裝，請確定有安裝以下套件</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install styled-components</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>官方網站說明:<a href=\"https://styled-components.com/docs/basics\">https://styled-components.com/docs/basics</a><br>前端框架（一）–Styled Component <a href=\"https://hackmd.io/@gBsS-IZnRwict4gxZ0zLhg/SJ9Dfdfcv\">https://hackmd.io/@gBsS-IZnRwict4gxZ0zLhg/SJ9Dfdfcv</a><br>使用方式是創建一個裝載樣式的元件，以styled後面加上要寫入的html tag如</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">&quot;styled-components&quot;</span>;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">// 建立一個按鈕的樣式元件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Btn</span> = styled.<span class=\"property\">button</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   padding: 0.6rem 1.3rem;</span></span><br><span class=\"line\"><span class=\"string\">   border: 1px solid black;</span></span><br><span class=\"line\"><span class=\"string\">   border-radius: 3px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">// 可以引用原本的元件，透過props的屬性，做不同樣式的判斷</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SearchBtn</span> = <span class=\"title function_\">styled</span>(<span class=\"title class_\">Btn</span>)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   color: pink;</span></span><br><span class=\"line\"><span class=\"string\">   background: <span class=\"subst\">$&#123;props =&gt; porps.primary ? <span class=\"string\">&quot;palevioletred&quot;</span> : <span class=\"string\">&quot;white&quot;</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Content</span> = styled.<span class=\"property\">div</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   display: flex;</span></span><br><span class=\"line\"><span class=\"string\">   justify-content: center;</span></span><br><span class=\"line\"><span class=\"string\">   align-items: center;</span></span><br><span class=\"line\"><span class=\"string\">   padding: 3rem;</span></span><br><span class=\"line\"><span class=\"string\">   width: 100vw;</span></span><br><span class=\"line\"><span class=\"string\">   height: 300px;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Main</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Btn</span>&gt;</span>基礎的按鈕<span class=\"tag\">&lt;/<span class=\"name\">Btn</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SearchBtn</span> <span class=\"attr\">primary</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;​​</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>紀錄自己在開發react時遇到的問題<br>在在react中的樣式(style)許多種呈現的方式，目前有用到的方式</p>\n</blockquote>\n<h2 id=\"1-import-css\"><a href=\"#1-import-css\" class=\"headerlink\" title=\"1. import css\"></a>1. import css</h2><p>在react中引入css檔案，並且透過class的方式，讓節點可以吃到樣式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button-search</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.6rem</span> <span class=\"number\">1.3rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: bg-primary</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>實際的使用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./button.css&quot;</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBtn</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;button-search&quot;</span> <span class=\"attr\">...props</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-使用CSS-Modules引入\"><a href=\"#2-使用CSS-Modules引入\" class=\"headerlink\" title=\"2. 使用CSS Modules引入\"></a>2. 使用CSS Modules引入</h2><p>跟上面的方式主要的不同，是透過module的方式來引入css，可解決</p>\n<ol>\n<li>確保單個組件（元件）的所有樣式集中在同一個地方</li>\n<li>確保元件樣式只應用於該組件，他會在原有的class名稱加入雜湊值，成為獨一無二的樣式。</li>\n<li>解決 CSS 全局作用域的問題</li>\n</ol>\n<p>實際的做法: 先新增一個 <strong><styleName>.module.css</strong>的檔案，在裡面加入如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.buttonSearch</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.6rem</span> <span class=\"number\">1.3rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: bg-primary;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名可以使用這種駝峰式的樣式寫法，在引用的時候會比較方便。實際的引入－(如果是使用類似”button-search”的寫法，在使用的時候就需要以 **classes[“button-search”]**的方式來寫)</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> classes <span class=\"keyword\">from</span> <span class=\"string\">&quot;./button.module.css&quot;</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBtn</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes.buttonSearch&#125;</span> <span class=\"attr\">...props</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>參考來源:<a href=\"https://molly1024.medium.com/css-modules-%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%94%B9%E7%94%A8-css-modules-what-is-css-modules-why-should-you-use-it-aeb7d2955c58\">https://molly1024.medium.com/css-modules-%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E8%A6%81%E6%94%B9%E7%94%A8-css-modules-what-is-css-modules-why-should-you-use-it-aeb7d2955c58</a><br>或者是結合其他類型的使用，如bootstrap，可另外建立一個變數中，將要引入的樣式class(如bootstrap)，將這個樣式應用在要套用的元件也有相同的效果。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> classes <span class=\"keyword\">from</span> <span class=\"string\">&quot;./button.module.css&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;bootstrap/dist/bootstrap.css&quot;</span>;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">SearchBtn</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> btnClass = <span class=\"string\">`btn <span class=\"subst\">$&#123;classes.buttonSearch&#125;</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;btnClass&#125;</span> <span class=\"attr\">...props</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span> </span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-使用styled-components\"><a href=\"#3-使用styled-components\" class=\"headerlink\" title=\"3. 使用styled components\"></a>3. 使用styled components</h2><p>在介紹react的元件的時候有提到，有一種元件是沒有狀態的，只有提供樣式，這概念很接近styled component則是其進一步的擴展<br>安裝，請確定有安裝以下套件</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install styled-components</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>官方網站說明:<a href=\"https://styled-components.com/docs/basics\">https://styled-components.com/docs/basics</a><br>前端框架（一）–Styled Component <a href=\"https://hackmd.io/@gBsS-IZnRwict4gxZ0zLhg/SJ9Dfdfcv\">https://hackmd.io/@gBsS-IZnRwict4gxZ0zLhg/SJ9Dfdfcv</a><br>使用方式是創建一個裝載樣式的元件，以styled後面加上要寫入的html tag如</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">&quot;styled-components&quot;</span>;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">// 建立一個按鈕的樣式元件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Btn</span> = styled.<span class=\"property\">button</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   padding: 0.6rem 1.3rem;</span></span><br><span class=\"line\"><span class=\"string\">   border: 1px solid black;</span></span><br><span class=\"line\"><span class=\"string\">   border-radius: 3px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">// 可以引用原本的元件，透過props的屬性，做不同樣式的判斷</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SearchBtn</span> = <span class=\"title function_\">styled</span>(<span class=\"title class_\">Btn</span>)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   color: pink;</span></span><br><span class=\"line\"><span class=\"string\">   background: <span class=\"subst\">$&#123;props =&gt; porps.primary ? <span class=\"string\">&quot;palevioletred&quot;</span> : <span class=\"string\">&quot;white&quot;</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Content</span> = styled.<span class=\"property\">div</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   display: flex;</span></span><br><span class=\"line\"><span class=\"string\">   justify-content: center;</span></span><br><span class=\"line\"><span class=\"string\">   align-items: center;</span></span><br><span class=\"line\"><span class=\"string\">   padding: 3rem;</span></span><br><span class=\"line\"><span class=\"string\">   width: 100vw;</span></span><br><span class=\"line\"><span class=\"string\">   height: 300px;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Main</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Btn</span>&gt;</span>基礎的按鈕<span class=\"tag\">&lt;/<span class=\"name\">Btn</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SearchBtn</span> <span class=\"attr\">primary</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;​​</span><br></pre></td></tr></table></figure>\n"},{"title":"AOD 網路商城網站建置","date":"2024-01-04T06:14:08.000Z","_content":"\n\n## 1商品詳細頁\n\n* Temperate: https://bazaar.ui-lib.com/products/spec-2015\n\n### 網站架構\n\n* Temperate: https://bazaar.ui-lib.com/cart\n\n* 1-1 概略 (api productOverView/:productId) \n\n  * 1-1-1商品照片(images)  \n  * 1-1-2商品內容\n    1. 標題(title)\n    2. 評分(rating)\n    3. 品牌(brand)\n    4. 訂閱週期(subscription cycle)\n    5. 支援作業系統(support-operating-system)\n    6. 版本資訊(version)\n    7. 單價(price)\n    8. (元件1-3)加入購物車\n\n* 1-2 商品詳細\n\n  * 1-2-1軟體介紹: 純文字處理\n  * 1-2-2評論: 評論內容(api: productCommon/:productId)\n\n    * 使用者名稱(use-name)\n    * 使用者頭像(user-avator)\n    * 使用者評分(user-rating)\n    * 使用者留言(user-common)\n    * 評論時間(common-time)\n\n  * 1-2-3系統需求(api: productRequirement/:productId)\n\n    * 最低需求(minimum-requirements)\n      * CPU(cpu)\n      * 記憶體(memory)\n      * 硬碟(hard-drive)\n      * GPU(gpu)\n      * 作業系統(operating-system)\n      * 系統架構(system-architecture)\n    * 建議需求(suggestion-requirements)\n      * CPU(cpu)\n      * 記憶體(memory)\n      * 硬碟(hard-drive)\n      * GPU(gpu)\n      * 作業系統(operating-system)\n      * 系統架構(system-architecture)\n\n* 1-3 加入購物車: 點擊可選擇數量+按鈕新增至購物車\n\n## 2購物車頁面(order)\n\n* 2-1購物車清單(orderList) in redux cart.list\n  * 2-1-1購物車商品\n    * productId(disabled)\n    * 商品名稱(name)\n    * 商品照片(image)\n    * 商品單價(price)\n    * 商品數量(count)\n    * 商品小計\n    * 增加/減少數量\n    * 刪除該品項\n* 2-2訂單摘要\n  * 小計(Subtotal)\n  * 運費(Shipping)\n  * 稅金(Tax)\n  * 折扣(Discount)\n  * 合計(Total)\n  * 結帳(checkout)\n\n","source":"_posts/AOD-網路商城網站建置.md","raw":"---\ntitle: AOD 網路商城網站建置\ndate: 2024-01-04 14:14:08\ntags: [頁面, 系統架構]\n---\n\n\n## 1商品詳細頁\n\n* Temperate: https://bazaar.ui-lib.com/products/spec-2015\n\n### 網站架構\n\n* Temperate: https://bazaar.ui-lib.com/cart\n\n* 1-1 概略 (api productOverView/:productId) \n\n  * 1-1-1商品照片(images)  \n  * 1-1-2商品內容\n    1. 標題(title)\n    2. 評分(rating)\n    3. 品牌(brand)\n    4. 訂閱週期(subscription cycle)\n    5. 支援作業系統(support-operating-system)\n    6. 版本資訊(version)\n    7. 單價(price)\n    8. (元件1-3)加入購物車\n\n* 1-2 商品詳細\n\n  * 1-2-1軟體介紹: 純文字處理\n  * 1-2-2評論: 評論內容(api: productCommon/:productId)\n\n    * 使用者名稱(use-name)\n    * 使用者頭像(user-avator)\n    * 使用者評分(user-rating)\n    * 使用者留言(user-common)\n    * 評論時間(common-time)\n\n  * 1-2-3系統需求(api: productRequirement/:productId)\n\n    * 最低需求(minimum-requirements)\n      * CPU(cpu)\n      * 記憶體(memory)\n      * 硬碟(hard-drive)\n      * GPU(gpu)\n      * 作業系統(operating-system)\n      * 系統架構(system-architecture)\n    * 建議需求(suggestion-requirements)\n      * CPU(cpu)\n      * 記憶體(memory)\n      * 硬碟(hard-drive)\n      * GPU(gpu)\n      * 作業系統(operating-system)\n      * 系統架構(system-architecture)\n\n* 1-3 加入購物車: 點擊可選擇數量+按鈕新增至購物車\n\n## 2購物車頁面(order)\n\n* 2-1購物車清單(orderList) in redux cart.list\n  * 2-1-1購物車商品\n    * productId(disabled)\n    * 商品名稱(name)\n    * 商品照片(image)\n    * 商品單價(price)\n    * 商品數量(count)\n    * 商品小計\n    * 增加/減少數量\n    * 刪除該品項\n* 2-2訂單摘要\n  * 小計(Subtotal)\n  * 運費(Shipping)\n  * 稅金(Tax)\n  * 折扣(Discount)\n  * 合計(Total)\n  * 結帳(checkout)\n\n","slug":"AOD-網路商城網站建置","published":1,"updated":"2024-01-05T16:08:51.894Z","_id":"clqytasro000duwrpe7l8a65p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1商品詳細頁\"><a href=\"#1商品詳細頁\" class=\"headerlink\" title=\"1商品詳細頁\"></a>1商品詳細頁</h2><ul>\n<li>Temperate: <a href=\"https://bazaar.ui-lib.com/products/spec-2015\">https://bazaar.ui-lib.com/products/spec-2015</a></li>\n</ul>\n<h3 id=\"網站架構\"><a href=\"#網站架構\" class=\"headerlink\" title=\"網站架構\"></a>網站架構</h3><ul>\n<li><p>Temperate: <a href=\"https://bazaar.ui-lib.com/cart\">https://bazaar.ui-lib.com/cart</a></p>\n</li>\n<li><p>1-1 概略 (api productOverView&#x2F;:productId) </p>\n<ul>\n<li>1-1-1商品照片(images)  </li>\n<li>1-1-2商品內容<ol>\n<li>標題(title)</li>\n<li>評分(rating)</li>\n<li>品牌(brand)</li>\n<li>訂閱週期(subscription cycle)</li>\n<li>支援作業系統(support-operating-system)</li>\n<li>版本資訊(version)</li>\n<li>單價(price)</li>\n<li>(元件1-3)加入購物車</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>1-2 商品詳細</p>\n<ul>\n<li><p>1-2-1軟體介紹: 純文字處理</p>\n</li>\n<li><p>1-2-2評論: 評論內容(api: productCommon&#x2F;:productId)</p>\n<ul>\n<li>使用者名稱(use-name)</li>\n<li>使用者頭像(user-avator)</li>\n<li>使用者評分(user-rating)</li>\n<li>使用者留言(user-common)</li>\n<li>評論時間(common-time)</li>\n</ul>\n</li>\n<li><p>1-2-3系統需求(api: productRequirement&#x2F;:productId)</p>\n<ul>\n<li>最低需求(minimum-requirements)<ul>\n<li>CPU(cpu)</li>\n<li>記憶體(memory)</li>\n<li>硬碟(hard-drive)</li>\n<li>GPU(gpu)</li>\n<li>作業系統(operating-system)</li>\n<li>系統架構(system-architecture)</li>\n</ul>\n</li>\n<li>建議需求(suggestion-requirements)<ul>\n<li>CPU(cpu)</li>\n<li>記憶體(memory)</li>\n<li>硬碟(hard-drive)</li>\n<li>GPU(gpu)</li>\n<li>作業系統(operating-system)</li>\n<li>系統架構(system-architecture)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>1-3 加入購物車: 點擊可選擇數量+按鈕新增至購物車</p>\n</li>\n</ul>\n<h2 id=\"2購物車頁面-order\"><a href=\"#2購物車頁面-order\" class=\"headerlink\" title=\"2購物車頁面(order)\"></a>2購物車頁面(order)</h2><ul>\n<li>2-1購物車清單(orderList) in redux cart.list<ul>\n<li>2-1-1購物車商品<ul>\n<li>productId(disabled)</li>\n<li>商品名稱(name)</li>\n<li>商品照片(image)</li>\n<li>商品單價(price)</li>\n<li>商品數量(count)</li>\n<li>商品小計</li>\n<li>增加&#x2F;減少數量</li>\n<li>刪除該品項</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2-2訂單摘要<ul>\n<li>小計(Subtotal)</li>\n<li>運費(Shipping)</li>\n<li>稅金(Tax)</li>\n<li>折扣(Discount)</li>\n<li>合計(Total)</li>\n<li>結帳(checkout)</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1商品詳細頁\"><a href=\"#1商品詳細頁\" class=\"headerlink\" title=\"1商品詳細頁\"></a>1商品詳細頁</h2><ul>\n<li>Temperate: <a href=\"https://bazaar.ui-lib.com/products/spec-2015\">https://bazaar.ui-lib.com/products/spec-2015</a></li>\n</ul>\n<h3 id=\"網站架構\"><a href=\"#網站架構\" class=\"headerlink\" title=\"網站架構\"></a>網站架構</h3><ul>\n<li><p>Temperate: <a href=\"https://bazaar.ui-lib.com/cart\">https://bazaar.ui-lib.com/cart</a></p>\n</li>\n<li><p>1-1 概略 (api productOverView&#x2F;:productId) </p>\n<ul>\n<li>1-1-1商品照片(images)  </li>\n<li>1-1-2商品內容<ol>\n<li>標題(title)</li>\n<li>評分(rating)</li>\n<li>品牌(brand)</li>\n<li>訂閱週期(subscription cycle)</li>\n<li>支援作業系統(support-operating-system)</li>\n<li>版本資訊(version)</li>\n<li>單價(price)</li>\n<li>(元件1-3)加入購物車</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>1-2 商品詳細</p>\n<ul>\n<li><p>1-2-1軟體介紹: 純文字處理</p>\n</li>\n<li><p>1-2-2評論: 評論內容(api: productCommon&#x2F;:productId)</p>\n<ul>\n<li>使用者名稱(use-name)</li>\n<li>使用者頭像(user-avator)</li>\n<li>使用者評分(user-rating)</li>\n<li>使用者留言(user-common)</li>\n<li>評論時間(common-time)</li>\n</ul>\n</li>\n<li><p>1-2-3系統需求(api: productRequirement&#x2F;:productId)</p>\n<ul>\n<li>最低需求(minimum-requirements)<ul>\n<li>CPU(cpu)</li>\n<li>記憶體(memory)</li>\n<li>硬碟(hard-drive)</li>\n<li>GPU(gpu)</li>\n<li>作業系統(operating-system)</li>\n<li>系統架構(system-architecture)</li>\n</ul>\n</li>\n<li>建議需求(suggestion-requirements)<ul>\n<li>CPU(cpu)</li>\n<li>記憶體(memory)</li>\n<li>硬碟(hard-drive)</li>\n<li>GPU(gpu)</li>\n<li>作業系統(operating-system)</li>\n<li>系統架構(system-architecture)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>1-3 加入購物車: 點擊可選擇數量+按鈕新增至購物車</p>\n</li>\n</ul>\n<h2 id=\"2購物車頁面-order\"><a href=\"#2購物車頁面-order\" class=\"headerlink\" title=\"2購物車頁面(order)\"></a>2購物車頁面(order)</h2><ul>\n<li>2-1購物車清單(orderList) in redux cart.list<ul>\n<li>2-1-1購物車商品<ul>\n<li>productId(disabled)</li>\n<li>商品名稱(name)</li>\n<li>商品照片(image)</li>\n<li>商品單價(price)</li>\n<li>商品數量(count)</li>\n<li>商品小計</li>\n<li>增加&#x2F;減少數量</li>\n<li>刪除該品項</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2-2訂單摘要<ul>\n<li>小計(Subtotal)</li>\n<li>運費(Shipping)</li>\n<li>稅金(Tax)</li>\n<li>折扣(Discount)</li>\n<li>合計(Total)</li>\n<li>結帳(checkout)</li>\n</ul>\n</li>\n</ul>\n"},{"title":"三層式架構","date":"2024-01-05T15:46:01.000Z","_content":"\n在初學程式的時候，經常會出現一個狀況，就是將所有的商業邏輯跟處理動作，全部放在一個檔案之中，初期在專案小的時候很簡便，然後在後期的維護上，隨著專案規模的增加，從而導致了許多問題，包含－\n1. 難以維護\n2. 難以閱讀\n3. 耦合性過高，改Ａ壞Ｂ\n\n在這個情況下，如果有一個良好的架構，便能夠提升開發與維護的效能。\n那使用架構有什麼好處嗎？\n> 這邊記得要多參考其他的說明，後續持續擴充\n* 好處\n  1. 較好形成一個規範，可做為標準化流程。\n  2. 提高重用性，透過分層將相同類型的程式碼放在一塊。\n  3. 團體合作的時候，能夠分層進行；開發人員只需專注於自己開發的那一層即可。\n  4. 具有好的開放性、可擴充性優點。\n  5. 降低程式碼之間的依賴，每層溝通是透過介面。\n  6. 提高系統安全性，因為使用者需要透過 Service 層才有機會與下一層 Repository 撈取資料。\n* 壞處 (有好一定也有壞)\n  1. 增加了開發成本，傳統一個人負責寫到底；分層下需要多人進行合作。\n  2. 調整程式可能會出現連動性；有的時候修改一個地方，會導致其他層也需要跟著調整。\n  3. 相較於一條龍開發系統性能下降，原本程式可以直接透過DB撈取資料，現在需要透過中間層的轉介才能夠拿到。\n\n在文章中提到\n\n> 分層架構是運用最為廣泛的架構模式\n\n![](/images/RxSrWJm.jpg)\n\n## 簡介\n三層式架構顧名思義，主要分為了三層：\n\n1、Controller：控制層，作為接口。\n2、Service：商業邏輯層，只要有關商業邏輯部分的處理全部放在這一層。\n3、Repository：倉儲層，作為資料存儲的一層。\n4、Common：共用層，作為存放各層會用到的相同東西。\n他們之間的關係如下圖:\n\n> 參考資料來源： https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture/\n>\n\n> https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/","source":"_posts/三層式架構.md","raw":"---\ntitle: 三層式架構\ndate: 2024-01-05 23:46:01\ntags: [物件導向設計, C#]\n---\n\n在初學程式的時候，經常會出現一個狀況，就是將所有的商業邏輯跟處理動作，全部放在一個檔案之中，初期在專案小的時候很簡便，然後在後期的維護上，隨著專案規模的增加，從而導致了許多問題，包含－\n1. 難以維護\n2. 難以閱讀\n3. 耦合性過高，改Ａ壞Ｂ\n\n在這個情況下，如果有一個良好的架構，便能夠提升開發與維護的效能。\n那使用架構有什麼好處嗎？\n> 這邊記得要多參考其他的說明，後續持續擴充\n* 好處\n  1. 較好形成一個規範，可做為標準化流程。\n  2. 提高重用性，透過分層將相同類型的程式碼放在一塊。\n  3. 團體合作的時候，能夠分層進行；開發人員只需專注於自己開發的那一層即可。\n  4. 具有好的開放性、可擴充性優點。\n  5. 降低程式碼之間的依賴，每層溝通是透過介面。\n  6. 提高系統安全性，因為使用者需要透過 Service 層才有機會與下一層 Repository 撈取資料。\n* 壞處 (有好一定也有壞)\n  1. 增加了開發成本，傳統一個人負責寫到底；分層下需要多人進行合作。\n  2. 調整程式可能會出現連動性；有的時候修改一個地方，會導致其他層也需要跟著調整。\n  3. 相較於一條龍開發系統性能下降，原本程式可以直接透過DB撈取資料，現在需要透過中間層的轉介才能夠拿到。\n\n在文章中提到\n\n> 分層架構是運用最為廣泛的架構模式\n\n![](/images/RxSrWJm.jpg)\n\n## 簡介\n三層式架構顧名思義，主要分為了三層：\n\n1、Controller：控制層，作為接口。\n2、Service：商業邏輯層，只要有關商業邏輯部分的處理全部放在這一層。\n3、Repository：倉儲層，作為資料存儲的一層。\n4、Common：共用層，作為存放各層會用到的相同東西。\n他們之間的關係如下圖:\n\n> 參考資料來源： https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture/\n>\n\n> https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/","slug":"三層式架構","published":1,"updated":"2024-01-05T16:26:03.596Z","_id":"clr0t6c3m0000pw7o5aa1bpbp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在初學程式的時候，經常會出現一個狀況，就是將所有的商業邏輯跟處理動作，全部放在一個檔案之中，初期在專案小的時候很簡便，然後在後期的維護上，隨著專案規模的增加，從而導致了許多問題，包含－</p>\n<ol>\n<li>難以維護</li>\n<li>難以閱讀</li>\n<li>耦合性過高，改Ａ壞Ｂ</li>\n</ol>\n<p>在這個情況下，如果有一個良好的架構，便能夠提升開發與維護的效能。<br>那使用架構有什麼好處嗎？</p>\n<blockquote>\n<p>這邊記得要多參考其他的說明，後續持續擴充</p>\n</blockquote>\n<ul>\n<li>好處<ol>\n<li>較好形成一個規範，可做為標準化流程。</li>\n<li>提高重用性，透過分層將相同類型的程式碼放在一塊。</li>\n<li>團體合作的時候，能夠分層進行；開發人員只需專注於自己開發的那一層即可。</li>\n<li>具有好的開放性、可擴充性優點。</li>\n<li>降低程式碼之間的依賴，每層溝通是透過介面。</li>\n<li>提高系統安全性，因為使用者需要透過 Service 層才有機會與下一層 Repository 撈取資料。</li>\n</ol>\n</li>\n<li>壞處 (有好一定也有壞)<ol>\n<li>增加了開發成本，傳統一個人負責寫到底；分層下需要多人進行合作。</li>\n<li>調整程式可能會出現連動性；有的時候修改一個地方，會導致其他層也需要跟著調整。</li>\n<li>相較於一條龍開發系統性能下降，原本程式可以直接透過DB撈取資料，現在需要透過中間層的轉介才能夠拿到。</li>\n</ol>\n</li>\n</ul>\n<p>在文章中提到</p>\n<blockquote>\n<p>分層架構是運用最為廣泛的架構模式</p>\n</blockquote>\n<p><img src=\"/images/RxSrWJm.jpg\"></p>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>三層式架構顧名思義，主要分為了三層：</p>\n<p>1、Controller：控制層，作為接口。<br>2、Service：商業邏輯層，只要有關商業邏輯部分的處理全部放在這一層。<br>3、Repository：倉儲層，作為資料存儲的一層。<br>4、Common：共用層，作為存放各層會用到的相同東西。<br>他們之間的關係如下圖:</p>\n<blockquote>\n<p>參考資料來源： <a href=\"https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture/\">https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture/</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/\">https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在初學程式的時候，經常會出現一個狀況，就是將所有的商業邏輯跟處理動作，全部放在一個檔案之中，初期在專案小的時候很簡便，然後在後期的維護上，隨著專案規模的增加，從而導致了許多問題，包含－</p>\n<ol>\n<li>難以維護</li>\n<li>難以閱讀</li>\n<li>耦合性過高，改Ａ壞Ｂ</li>\n</ol>\n<p>在這個情況下，如果有一個良好的架構，便能夠提升開發與維護的效能。<br>那使用架構有什麼好處嗎？</p>\n<blockquote>\n<p>這邊記得要多參考其他的說明，後續持續擴充</p>\n</blockquote>\n<ul>\n<li>好處<ol>\n<li>較好形成一個規範，可做為標準化流程。</li>\n<li>提高重用性，透過分層將相同類型的程式碼放在一塊。</li>\n<li>團體合作的時候，能夠分層進行；開發人員只需專注於自己開發的那一層即可。</li>\n<li>具有好的開放性、可擴充性優點。</li>\n<li>降低程式碼之間的依賴，每層溝通是透過介面。</li>\n<li>提高系統安全性，因為使用者需要透過 Service 層才有機會與下一層 Repository 撈取資料。</li>\n</ol>\n</li>\n<li>壞處 (有好一定也有壞)<ol>\n<li>增加了開發成本，傳統一個人負責寫到底；分層下需要多人進行合作。</li>\n<li>調整程式可能會出現連動性；有的時候修改一個地方，會導致其他層也需要跟著調整。</li>\n<li>相較於一條龍開發系統性能下降，原本程式可以直接透過DB撈取資料，現在需要透過中間層的轉介才能夠拿到。</li>\n</ol>\n</li>\n</ul>\n<p>在文章中提到</p>\n<blockquote>\n<p>分層架構是運用最為廣泛的架構模式</p>\n</blockquote>\n<p><img src=\"/images/RxSrWJm.jpg\"></p>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>三層式架構顧名思義，主要分為了三層：</p>\n<p>1、Controller：控制層，作為接口。<br>2、Service：商業邏輯層，只要有關商業邏輯部分的處理全部放在這一層。<br>3、Repository：倉儲層，作為資料存儲的一層。<br>4、Common：共用層，作為存放各層會用到的相同東西。<br>他們之間的關係如下圖:</p>\n<blockquote>\n<p>參考資料來源： <a href=\"https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture/\">https://igouist.github.io/post/2021/10/newbie-5-3-layer-architecture/</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/\">https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/</a></p>\n</blockquote>\n"},{"title":"React 面試題","date":"2024-01-05T15:47:20.000Z","_content":"\n[TOC]\n\n\n\n## React 基礎\n\n- [什麼是純函式 (pure function)？為什麼 React 的函式元件需要是純函式？](https://www.explainthis.io/zh-hant/swe/react-pure-function)\n\n  純函式代表有以下兩種特點－1. 只要有相同的輸入就會有相同的輸出; 她不會改變函式以外的存在，也就是不會有副作用(side effect)\n\n  確保在渲染的時候可以有相同的產出，使用strict mode可以更快地避免這樣問題的產生\n\n- [什麼是 JSX？為什麼要用 JSX？](https://www.explainthis.io/zh-hant/swe/what-is-jsx)\n\n- [請解釋 React 生命週期？](https://www.explainthis.io/zh-hant/swe/react-lifecycle)\n\n- [什麼是 Virtual DOM？](https://www.explainthis.io/zh-hant/swe/react-virtual-dom)\n\n## React Hooks\n\n- [React Hooks 是什麼？](https://www.explainthis.io/zh-hant/swe/what-is-react-hook)\n- [為什麼只能在最頂端層呼叫 Hook？從 useState 實作原理來回答](https://www.explainthis.io/zh-hant/swe/why-call-react-hook-top-level)\n- [請解釋 useEffect？與 useLayoutEffect 的區別？](https://www.explainthis.io/zh-hant/swe/use-effect-vs-use-layout-effect)\n\n## React 進階\n\n- [為什麼 React 渲染列表時需要加上 key？](https://www.explainthis.io/zh-hant/swe/react-why-key)\n- [為什麼更新 React 中的 state 要用 immutable 的寫法？什麼是 immutable？該如何寫才會是 immutable？](https://www.explainthis.io/zh-hant/swe/react-why-immutable)\n\n## 概念篇\n\n### 元件\n\n函式元件：function Component\n\n純函式","source":"_posts/React-面試題.md","raw":"---\ntitle: React 面試題\ndate: 2024-01-05 23:47:20\ntags: [React, 前端面試]\n---\n\n[TOC]\n\n\n\n## React 基礎\n\n- [什麼是純函式 (pure function)？為什麼 React 的函式元件需要是純函式？](https://www.explainthis.io/zh-hant/swe/react-pure-function)\n\n  純函式代表有以下兩種特點－1. 只要有相同的輸入就會有相同的輸出; 她不會改變函式以外的存在，也就是不會有副作用(side effect)\n\n  確保在渲染的時候可以有相同的產出，使用strict mode可以更快地避免這樣問題的產生\n\n- [什麼是 JSX？為什麼要用 JSX？](https://www.explainthis.io/zh-hant/swe/what-is-jsx)\n\n- [請解釋 React 生命週期？](https://www.explainthis.io/zh-hant/swe/react-lifecycle)\n\n- [什麼是 Virtual DOM？](https://www.explainthis.io/zh-hant/swe/react-virtual-dom)\n\n## React Hooks\n\n- [React Hooks 是什麼？](https://www.explainthis.io/zh-hant/swe/what-is-react-hook)\n- [為什麼只能在最頂端層呼叫 Hook？從 useState 實作原理來回答](https://www.explainthis.io/zh-hant/swe/why-call-react-hook-top-level)\n- [請解釋 useEffect？與 useLayoutEffect 的區別？](https://www.explainthis.io/zh-hant/swe/use-effect-vs-use-layout-effect)\n\n## React 進階\n\n- [為什麼 React 渲染列表時需要加上 key？](https://www.explainthis.io/zh-hant/swe/react-why-key)\n- [為什麼更新 React 中的 state 要用 immutable 的寫法？什麼是 immutable？該如何寫才會是 immutable？](https://www.explainthis.io/zh-hant/swe/react-why-immutable)\n\n## 概念篇\n\n### 元件\n\n函式元件：function Component\n\n純函式","slug":"React-面試題","published":1,"updated":"2024-01-05T16:08:24.771Z","_id":"clr0t7vro00006i7oendc8yzk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h2 id=\"React-基礎\"><a href=\"#React-基礎\" class=\"headerlink\" title=\"React 基礎\"></a>React 基礎</h2><ul>\n<li><p><a href=\"https://www.explainthis.io/zh-hant/swe/react-pure-function\">什麼是純函式 (pure function)？為什麼 React 的函式元件需要是純函式？</a></p>\n<p>純函式代表有以下兩種特點－1. 只要有相同的輸入就會有相同的輸出; 她不會改變函式以外的存在，也就是不會有副作用(side effect)</p>\n<p>確保在渲染的時候可以有相同的產出，使用strict mode可以更快地避免這樣問題的產生</p>\n</li>\n<li><p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-jsx\">什麼是 JSX？為什麼要用 JSX？</a></p>\n</li>\n<li><p><a href=\"https://www.explainthis.io/zh-hant/swe/react-lifecycle\">請解釋 React 生命週期？</a></p>\n</li>\n<li><p><a href=\"https://www.explainthis.io/zh-hant/swe/react-virtual-dom\">什麼是 Virtual DOM？</a></p>\n</li>\n</ul>\n<h2 id=\"React-Hooks\"><a href=\"#React-Hooks\" class=\"headerlink\" title=\"React Hooks\"></a>React Hooks</h2><ul>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-react-hook\">React Hooks 是什麼？</a></li>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/why-call-react-hook-top-level\">為什麼只能在最頂端層呼叫 Hook？從 useState 實作原理來回答</a></li>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/use-effect-vs-use-layout-effect\">請解釋 useEffect？與 useLayoutEffect 的區別？</a></li>\n</ul>\n<h2 id=\"React-進階\"><a href=\"#React-進階\" class=\"headerlink\" title=\"React 進階\"></a>React 進階</h2><ul>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/react-why-key\">為什麼 React 渲染列表時需要加上 key？</a></li>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/react-why-immutable\">為什麼更新 React 中的 state 要用 immutable 的寫法？什麼是 immutable？該如何寫才會是 immutable？</a></li>\n</ul>\n<h2 id=\"概念篇\"><a href=\"#概念篇\" class=\"headerlink\" title=\"概念篇\"></a>概念篇</h2><h3 id=\"元件\"><a href=\"#元件\" class=\"headerlink\" title=\"元件\"></a>元件</h3><p>函式元件：function Component</p>\n<p>純函式</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"React-基礎\"><a href=\"#React-基礎\" class=\"headerlink\" title=\"React 基礎\"></a>React 基礎</h2><ul>\n<li><p><a href=\"https://www.explainthis.io/zh-hant/swe/react-pure-function\">什麼是純函式 (pure function)？為什麼 React 的函式元件需要是純函式？</a></p>\n<p>純函式代表有以下兩種特點－1. 只要有相同的輸入就會有相同的輸出; 她不會改變函式以外的存在，也就是不會有副作用(side effect)</p>\n<p>確保在渲染的時候可以有相同的產出，使用strict mode可以更快地避免這樣問題的產生</p>\n</li>\n<li><p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-jsx\">什麼是 JSX？為什麼要用 JSX？</a></p>\n</li>\n<li><p><a href=\"https://www.explainthis.io/zh-hant/swe/react-lifecycle\">請解釋 React 生命週期？</a></p>\n</li>\n<li><p><a href=\"https://www.explainthis.io/zh-hant/swe/react-virtual-dom\">什麼是 Virtual DOM？</a></p>\n</li>\n</ul>\n<h2 id=\"React-Hooks\"><a href=\"#React-Hooks\" class=\"headerlink\" title=\"React Hooks\"></a>React Hooks</h2><ul>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-react-hook\">React Hooks 是什麼？</a></li>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/why-call-react-hook-top-level\">為什麼只能在最頂端層呼叫 Hook？從 useState 實作原理來回答</a></li>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/use-effect-vs-use-layout-effect\">請解釋 useEffect？與 useLayoutEffect 的區別？</a></li>\n</ul>\n<h2 id=\"React-進階\"><a href=\"#React-進階\" class=\"headerlink\" title=\"React 進階\"></a>React 進階</h2><ul>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/react-why-key\">為什麼 React 渲染列表時需要加上 key？</a></li>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/react-why-immutable\">為什麼更新 React 中的 state 要用 immutable 的寫法？什麼是 immutable？該如何寫才會是 immutable？</a></li>\n</ul>\n<h2 id=\"概念篇\"><a href=\"#概念篇\" class=\"headerlink\" title=\"概念篇\"></a>概念篇</h2><h3 id=\"元件\"><a href=\"#元件\" class=\"headerlink\" title=\"元件\"></a>元件</h3><p>函式元件：function Component</p>\n<p>純函式</p>\n"},{"title":".NET要學習的物件導向概念名詞","date":"2024-01-05T23:51:02.000Z","_content":"\n## 物件導向的三大特性\n### 封裝(Encapsulation)\n餐廳裡的食物都在廚房已經都做好了，我們只要點餐然後拿來吃就好\n\n封裝可以防止程式碼被篡改，提高程式碼的**穩定性**與**安全性**，但要真正實現這件事情，就需要對於方法設定權限，\n\n#### 存/取控制修飾子\n在宣告類別(class)、建構子(constructor)、介面(interface)或函式(function)中使用\n* public: 公開的，可以被同一類別或物件中的成員存取使用，當然其他人享用也可以\n* private：私人的，只有同一類別的的物件可以使用，其他人不可以用。\n* protected：受到保護的，除了同一類別的物件可以用之外，如果繼承了該物件，同樣也可以使用\n* default\n\nhttps://hackmd.io/@metal35x/r14R56nXU\n\n### 繼承\n餐廳裡的食物，如果嫌味道不夠，那就再多加點調味料，可以符合自己的需求。\n\n\n\n\n### 多型\n同樣是義大利麵，白醬義大利麵跟青醬義大利麵的口味就不同\n定義是：不同的物件可以做出一樣的行為，但必須由他們自己的程式碼來實作\n-- 一樣的事，不同做法\n\n> 可以先釐清這幾種概念\n> * 多載(Overload)\n> * 覆寫(Override)\n> * 多型(Polymorphism)\n\n多型的例子，例如說老闆說要找一個人會要寫程式，具有程式開發能力的人，他認為的程式人是這樣的...\n\n```c#\npublic class Programmer\n{\n  public string WriteCSharp()\n  {\n    /* 寫Ｃ＃ */\n  }\n  public string WriteSQL()\n  {\n    /* 寫 SQL */\n  }\n  public string WriteJavascript()\n  {\n    /* 寫 Javascript */\n  }\n}\n```\n\n後來來了兩個人，一個寫的程式碼真的不怎麼樣...\n\n```C#\npublic class Ling : Programmer\n{\n  public string WriteCSharp()\n  {\n    return \"ShitCode\";\n  }\n  public string WriteSQL()\n  {\n    return \"ShitCode\";\n  }\n  public string WriteJavascript()\n  {\n    return \"shitCode\";\n  }\n}\n```\n\n然後另外一個人來了，他除了會寫以上那三個東西，他還會做資料分析\n\n```C#\npublic class Ming : Programmer\n{\n  public string WriteCSharp()\n  {\n    return \"CleanCode\";\n  }\n  public string WriteSQL()\n  {\n    return \"CleanCode\";\n  }\n  public string WriteJavascript()\n  {\n    return \"CleanCode\";\n  }\n  public DataMinding MingsMinding()\n  {\n    return new Tea(dataName: \"Ming Data\");\n  }\n}\n```\n再一起工作的情境，就會出現這樣\n\n```C#\npublic void newProject()\n{\n  Programmer programmer01 = new Ling();\n  Programmer programmer02 = new Ming();\n\n  programmer02.WriteCSharp(); // \"CleanCode\"\n  programmer01.WriteCSharp(); // \"ShitCode\"\n}\n```\n\n也就是多型的核心概念，用子類別實作出各式不同的方法，藉此讓父類別的方法延伸與多樣化的效果，這樣的好處是，可以各自時做自己的方法，卻不影響到父類別\n\n--------------\n實際有可能碰到的案例，如資料庫連線，我可以讓CommSqlDBConnect與ProjectSqlDBConnect都繼承了DBConnect，但各自保有對應不同資料庫的實作，物件中的其他物件也不用管DBConnect，只要確保能夠連線即可。\n\n這邊要注意的是\n當我將一個物件(例如小明)宣告為工程師的時候，他對老闆來說就只是工程師，而不是小明，所以像是小明會資料探勘，很抱歉，在上班的時候做這件事是不被允許的...\n\n**當子類別被以父類別的名義建立出來時，他就只能夠表現出父類別的樣子。**\n\n\n## SOILD \n## 依賴反轉原則\n## 介面\n","source":"_posts/NET要學習的概念名詞.md","raw":"---\ntitle: .NET要學習的物件導向概念名詞\ndate: 2024-01-06 07:51:02\ntags: [NET]\n---\n\n## 物件導向的三大特性\n### 封裝(Encapsulation)\n餐廳裡的食物都在廚房已經都做好了，我們只要點餐然後拿來吃就好\n\n封裝可以防止程式碼被篡改，提高程式碼的**穩定性**與**安全性**，但要真正實現這件事情，就需要對於方法設定權限，\n\n#### 存/取控制修飾子\n在宣告類別(class)、建構子(constructor)、介面(interface)或函式(function)中使用\n* public: 公開的，可以被同一類別或物件中的成員存取使用，當然其他人享用也可以\n* private：私人的，只有同一類別的的物件可以使用，其他人不可以用。\n* protected：受到保護的，除了同一類別的物件可以用之外，如果繼承了該物件，同樣也可以使用\n* default\n\nhttps://hackmd.io/@metal35x/r14R56nXU\n\n### 繼承\n餐廳裡的食物，如果嫌味道不夠，那就再多加點調味料，可以符合自己的需求。\n\n\n\n\n### 多型\n同樣是義大利麵，白醬義大利麵跟青醬義大利麵的口味就不同\n定義是：不同的物件可以做出一樣的行為，但必須由他們自己的程式碼來實作\n-- 一樣的事，不同做法\n\n> 可以先釐清這幾種概念\n> * 多載(Overload)\n> * 覆寫(Override)\n> * 多型(Polymorphism)\n\n多型的例子，例如說老闆說要找一個人會要寫程式，具有程式開發能力的人，他認為的程式人是這樣的...\n\n```c#\npublic class Programmer\n{\n  public string WriteCSharp()\n  {\n    /* 寫Ｃ＃ */\n  }\n  public string WriteSQL()\n  {\n    /* 寫 SQL */\n  }\n  public string WriteJavascript()\n  {\n    /* 寫 Javascript */\n  }\n}\n```\n\n後來來了兩個人，一個寫的程式碼真的不怎麼樣...\n\n```C#\npublic class Ling : Programmer\n{\n  public string WriteCSharp()\n  {\n    return \"ShitCode\";\n  }\n  public string WriteSQL()\n  {\n    return \"ShitCode\";\n  }\n  public string WriteJavascript()\n  {\n    return \"shitCode\";\n  }\n}\n```\n\n然後另外一個人來了，他除了會寫以上那三個東西，他還會做資料分析\n\n```C#\npublic class Ming : Programmer\n{\n  public string WriteCSharp()\n  {\n    return \"CleanCode\";\n  }\n  public string WriteSQL()\n  {\n    return \"CleanCode\";\n  }\n  public string WriteJavascript()\n  {\n    return \"CleanCode\";\n  }\n  public DataMinding MingsMinding()\n  {\n    return new Tea(dataName: \"Ming Data\");\n  }\n}\n```\n再一起工作的情境，就會出現這樣\n\n```C#\npublic void newProject()\n{\n  Programmer programmer01 = new Ling();\n  Programmer programmer02 = new Ming();\n\n  programmer02.WriteCSharp(); // \"CleanCode\"\n  programmer01.WriteCSharp(); // \"ShitCode\"\n}\n```\n\n也就是多型的核心概念，用子類別實作出各式不同的方法，藉此讓父類別的方法延伸與多樣化的效果，這樣的好處是，可以各自時做自己的方法，卻不影響到父類別\n\n--------------\n實際有可能碰到的案例，如資料庫連線，我可以讓CommSqlDBConnect與ProjectSqlDBConnect都繼承了DBConnect，但各自保有對應不同資料庫的實作，物件中的其他物件也不用管DBConnect，只要確保能夠連線即可。\n\n這邊要注意的是\n當我將一個物件(例如小明)宣告為工程師的時候，他對老闆來說就只是工程師，而不是小明，所以像是小明會資料探勘，很抱歉，在上班的時候做這件事是不被允許的...\n\n**當子類別被以父類別的名義建立出來時，他就只能夠表現出父類別的樣子。**\n\n\n## SOILD \n## 依賴反轉原則\n## 介面\n","slug":"NET要學習的概念名詞","published":1,"updated":"2024-01-06T00:35:29.872Z","_id":"clr1ai6lg0000ex7ohc4p8fyw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"物件導向的三大特性\"><a href=\"#物件導向的三大特性\" class=\"headerlink\" title=\"物件導向的三大特性\"></a>物件導向的三大特性</h2><h3 id=\"封裝-Encapsulation\"><a href=\"#封裝-Encapsulation\" class=\"headerlink\" title=\"封裝(Encapsulation)\"></a>封裝(Encapsulation)</h3><p>餐廳裡的食物都在廚房已經都做好了，我們只要點餐然後拿來吃就好</p>\n<p>封裝可以防止程式碼被篡改，提高程式碼的<strong>穩定性</strong>與<strong>安全性</strong>，但要真正實現這件事情，就需要對於方法設定權限，</p>\n<h4 id=\"存-取控制修飾子\"><a href=\"#存-取控制修飾子\" class=\"headerlink\" title=\"存&#x2F;取控制修飾子\"></a>存&#x2F;取控制修飾子</h4><p>在宣告類別(class)、建構子(constructor)、介面(interface)或函式(function)中使用</p>\n<ul>\n<li>public: 公開的，可以被同一類別或物件中的成員存取使用，當然其他人享用也可以</li>\n<li>private：私人的，只有同一類別的的物件可以使用，其他人不可以用。</li>\n<li>protected：受到保護的，除了同一類別的物件可以用之外，如果繼承了該物件，同樣也可以使用</li>\n<li>default</li>\n</ul>\n<p><a href=\"https://hackmd.io/@metal35x/r14R56nXU\">https://hackmd.io/@metal35x/r14R56nXU</a></p>\n<h3 id=\"繼承\"><a href=\"#繼承\" class=\"headerlink\" title=\"繼承\"></a>繼承</h3><p>餐廳裡的食物，如果嫌味道不夠，那就再多加點調味料，可以符合自己的需求。</p>\n<h3 id=\"多型\"><a href=\"#多型\" class=\"headerlink\" title=\"多型\"></a>多型</h3><p>同樣是義大利麵，白醬義大利麵跟青醬義大利麵的口味就不同<br>定義是：不同的物件可以做出一樣的行為，但必須由他們自己的程式碼來實作<br>– 一樣的事，不同做法</p>\n<blockquote>\n<p>可以先釐清這幾種概念</p>\n<ul>\n<li>多載(Overload)</li>\n<li>覆寫(Override)</li>\n<li>多型(Polymorphism)</li>\n</ul>\n</blockquote>\n<p>多型的例子，例如說老闆說要找一個人會要寫程式，具有程式開發能力的人，他認為的程式人是這樣的…</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Programmer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteCSharp</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 寫Ｃ＃ */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteSQL</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 寫 SQL */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteJavascript</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 寫 Javascript */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>後來來了兩個人，一個寫的程式碼真的不怎麼樣…</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Ling</span> : <span class=\"title\">Programmer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteCSharp</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ShitCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteSQL</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ShitCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteJavascript</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;shitCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後另外一個人來了，他除了會寫以上那三個東西，他還會做資料分析</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Ming</span> : <span class=\"title\">Programmer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteCSharp</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;CleanCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteSQL</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;CleanCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteJavascript</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;CleanCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataMinding <span class=\"title\">MingsMinding</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tea(dataName: <span class=\"string\">&quot;Ming Data&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再一起工作的情境，就會出現這樣</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newProject</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Programmer programmer01 = <span class=\"keyword\">new</span> Ling();</span><br><span class=\"line\">  Programmer programmer02 = <span class=\"keyword\">new</span> Ming();</span><br><span class=\"line\"></span><br><span class=\"line\">  programmer02.WriteCSharp(); <span class=\"comment\">// &quot;CleanCode&quot;</span></span><br><span class=\"line\">  programmer01.WriteCSharp(); <span class=\"comment\">// &quot;ShitCode&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是多型的核心概念，用子類別實作出各式不同的方法，藉此讓父類別的方法延伸與多樣化的效果，這樣的好處是，可以各自時做自己的方法，卻不影響到父類別</p>\n<hr>\n<p>實際有可能碰到的案例，如資料庫連線，我可以讓CommSqlDBConnect與ProjectSqlDBConnect都繼承了DBConnect，但各自保有對應不同資料庫的實作，物件中的其他物件也不用管DBConnect，只要確保能夠連線即可。</p>\n<p>這邊要注意的是<br>當我將一個物件(例如小明)宣告為工程師的時候，他對老闆來說就只是工程師，而不是小明，所以像是小明會資料探勘，很抱歉，在上班的時候做這件事是不被允許的…</p>\n<p><strong>當子類別被以父類別的名義建立出來時，他就只能夠表現出父類別的樣子。</strong></p>\n<h2 id=\"SOILD\"><a href=\"#SOILD\" class=\"headerlink\" title=\"SOILD\"></a>SOILD</h2><h2 id=\"依賴反轉原則\"><a href=\"#依賴反轉原則\" class=\"headerlink\" title=\"依賴反轉原則\"></a>依賴反轉原則</h2><h2 id=\"介面\"><a href=\"#介面\" class=\"headerlink\" title=\"介面\"></a>介面</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"物件導向的三大特性\"><a href=\"#物件導向的三大特性\" class=\"headerlink\" title=\"物件導向的三大特性\"></a>物件導向的三大特性</h2><h3 id=\"封裝-Encapsulation\"><a href=\"#封裝-Encapsulation\" class=\"headerlink\" title=\"封裝(Encapsulation)\"></a>封裝(Encapsulation)</h3><p>餐廳裡的食物都在廚房已經都做好了，我們只要點餐然後拿來吃就好</p>\n<p>封裝可以防止程式碼被篡改，提高程式碼的<strong>穩定性</strong>與<strong>安全性</strong>，但要真正實現這件事情，就需要對於方法設定權限，</p>\n<h4 id=\"存-取控制修飾子\"><a href=\"#存-取控制修飾子\" class=\"headerlink\" title=\"存&#x2F;取控制修飾子\"></a>存&#x2F;取控制修飾子</h4><p>在宣告類別(class)、建構子(constructor)、介面(interface)或函式(function)中使用</p>\n<ul>\n<li>public: 公開的，可以被同一類別或物件中的成員存取使用，當然其他人享用也可以</li>\n<li>private：私人的，只有同一類別的的物件可以使用，其他人不可以用。</li>\n<li>protected：受到保護的，除了同一類別的物件可以用之外，如果繼承了該物件，同樣也可以使用</li>\n<li>default</li>\n</ul>\n<p><a href=\"https://hackmd.io/@metal35x/r14R56nXU\">https://hackmd.io/@metal35x/r14R56nXU</a></p>\n<h3 id=\"繼承\"><a href=\"#繼承\" class=\"headerlink\" title=\"繼承\"></a>繼承</h3><p>餐廳裡的食物，如果嫌味道不夠，那就再多加點調味料，可以符合自己的需求。</p>\n<h3 id=\"多型\"><a href=\"#多型\" class=\"headerlink\" title=\"多型\"></a>多型</h3><p>同樣是義大利麵，白醬義大利麵跟青醬義大利麵的口味就不同<br>定義是：不同的物件可以做出一樣的行為，但必須由他們自己的程式碼來實作<br>– 一樣的事，不同做法</p>\n<blockquote>\n<p>可以先釐清這幾種概念</p>\n<ul>\n<li>多載(Overload)</li>\n<li>覆寫(Override)</li>\n<li>多型(Polymorphism)</li>\n</ul>\n</blockquote>\n<p>多型的例子，例如說老闆說要找一個人會要寫程式，具有程式開發能力的人，他認為的程式人是這樣的…</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Programmer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteCSharp</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 寫Ｃ＃ */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteSQL</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 寫 SQL */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteJavascript</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 寫 Javascript */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>後來來了兩個人，一個寫的程式碼真的不怎麼樣…</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Ling</span> : <span class=\"title\">Programmer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteCSharp</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ShitCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteSQL</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ShitCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteJavascript</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;shitCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後另外一個人來了，他除了會寫以上那三個東西，他還會做資料分析</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Ming</span> : <span class=\"title\">Programmer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteCSharp</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;CleanCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteSQL</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;CleanCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">WriteJavascript</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;CleanCode&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataMinding <span class=\"title\">MingsMinding</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tea(dataName: <span class=\"string\">&quot;Ming Data&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再一起工作的情境，就會出現這樣</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">newProject</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Programmer programmer01 = <span class=\"keyword\">new</span> Ling();</span><br><span class=\"line\">  Programmer programmer02 = <span class=\"keyword\">new</span> Ming();</span><br><span class=\"line\"></span><br><span class=\"line\">  programmer02.WriteCSharp(); <span class=\"comment\">// &quot;CleanCode&quot;</span></span><br><span class=\"line\">  programmer01.WriteCSharp(); <span class=\"comment\">// &quot;ShitCode&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是多型的核心概念，用子類別實作出各式不同的方法，藉此讓父類別的方法延伸與多樣化的效果，這樣的好處是，可以各自時做自己的方法，卻不影響到父類別</p>\n<hr>\n<p>實際有可能碰到的案例，如資料庫連線，我可以讓CommSqlDBConnect與ProjectSqlDBConnect都繼承了DBConnect，但各自保有對應不同資料庫的實作，物件中的其他物件也不用管DBConnect，只要確保能夠連線即可。</p>\n<p>這邊要注意的是<br>當我將一個物件(例如小明)宣告為工程師的時候，他對老闆來說就只是工程師，而不是小明，所以像是小明會資料探勘，很抱歉，在上班的時候做這件事是不被允許的…</p>\n<p><strong>當子類別被以父類別的名義建立出來時，他就只能夠表現出父類別的樣子。</strong></p>\n<h2 id=\"SOILD\"><a href=\"#SOILD\" class=\"headerlink\" title=\"SOILD\"></a>SOILD</h2><h2 id=\"依賴反轉原則\"><a href=\"#依賴反轉原則\" class=\"headerlink\" title=\"依賴反轉原則\"></a>依賴反轉原則</h2><h2 id=\"介面\"><a href=\"#介面\" class=\"headerlink\" title=\"介面\"></a>介面</h2>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clqyp7usp0000uwrpgats7rqe","tag_id":"clqyp943a0001uwrp6alv7cl9","_id":"clqypajps000cuwrpho359eoi"},{"post_id":"clqytasro000duwrpe7l8a65p","tag_id":"clqytesy50000p8rpdai46kkb","_id":"clqytjcwo000058rp5ghd8zy9"},{"post_id":"clr0t7vro00006i7oendc8yzk","tag_id":"clqyp943a0001uwrp6alv7cl9","_id":"clr0tasxv00016i7o2xtr9a2a"},{"post_id":"clr0t6c3m0000pw7o5aa1bpbp","tag_id":"clr0tcgb000046i7o3u4t7qik","_id":"clr0tcgb100056i7offkq93ih"},{"post_id":"clr0t6c3m0000pw7o5aa1bpbp","tag_id":"clr0tc2l100026i7od7xj7icy","_id":"clr0tycev00002f7o4jnx1o7c"},{"post_id":"clr0t7vro00006i7oendc8yzk","tag_id":"clr0tyvi800012f7o3fjd9yfg","_id":"clr0tyvia00022f7o6nc37vf6"},{"post_id":"clqyp7usp0000uwrpgats7rqe","tag_id":"clr0tz4yw00032f7odr1n3sqp","_id":"clr0tz4yw00042f7oar6td24n"},{"post_id":"clqytasro000duwrpe7l8a65p","tag_id":"clr0tzgfm00052f7o2onm59xj","_id":"clr0tzgfn00062f7o769bfhvp"},{"post_id":"clr1ai6lg0000ex7ohc4p8fyw","tag_id":"clr1aicrw0001ex7o0oqs2dd0","_id":"clr1aicry0002ex7oga6pbdbg"}],"Tag":[{"name":"React","_id":"clqyp943a0001uwrp6alv7cl9"},{"name":"React,","_id":"clqyp966b0003uwrpdu9n5ld2"},{"name":"React css","_id":"clqyp9o7z0006uwrphecf3dbu"},{"name":"React, css","_id":"clqyp9vsi0008uwrp6c78bp0t"},{"name":"Reactcss","_id":"clqypa34c000auwrp0gt3b70u"},{"name":"頁面","_id":"clqytesy50000p8rpdai46kkb"},{"name":"Page","_id":"clqyti95i000018rp06pfhq5x"},{"name":"C#","_id":"clr0tc2l100026i7od7xj7icy"},{"name":"物件導向設計","_id":"clr0tcgb000046i7o3u4t7qik"},{"name":"前端面試","_id":"clr0tyvi800012f7o3fjd9yfg"},{"name":"Css","_id":"clr0tz4yw00032f7odr1n3sqp"},{"name":"系統架構","_id":"clr0tzgfm00052f7o2onm59xj"},{"name":"NET","_id":"clr1aicrw0001ex7o0oqs2dd0"}]}}